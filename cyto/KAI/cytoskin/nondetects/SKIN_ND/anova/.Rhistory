}
dfr.f=dfr.f[dfr.f[,15]< 0.2,]# keep samples with SEM<20%
print("dfr.f")
print(dfr.f)
geneExpr=as.data.frame(dfr.f[,c(1,14)])
} else{
if(nrow(df)==0){
geneExpr=as.data.frame(df[,c(1,14)])
}
}
colnames(geneExpr)[2]=gene
print("new geneEXP")
print(geneExpr)
DataControllsSkin=merge(DataControllsSkin,geneExpr, by.x="SAMPLE", by.y="SAMPLE", all.x=T )
#print(DataControllsSkin)
}
write.table(file="~/Documents/KAI/cytoskin/data.control_newfilt.txt",DataControllsSkin, sep="\t", quote=F )
###Psofiasis#
data.cols=read.csv(file=psoriasis[2])
data.cols=data.cols[7:nrow(data.cols),]
rowsP=as.character(data.cols[,2])
rowsP=rowsP[c(F,F,T)]
DataPsoriasisSkin=rowsP
DataPsoriasisSkin=as.data.frame(DataPsoriasisSkin)
colnames(DataPsoriasisSkin)=c("SAMPLE")
library(functional)
#for each in psoriasis
for(i in 1:length(psoriasis)){
#for(i in 1:3){
f=psoriasis[i]
#print(f)
#f=psoriasis[1]
gene=gsub("/Users/nikolaeva/Documents/KAI/cytoskin/CT_skin/Ctkalkulaatornahk_","",f)
gene=gsub("_2.csv","",gene)
CTdata=read.csv(file=f)
CTdata=CTdata[7:nrow(CTdata),2:ncol(CTdata)]
df=CTdata
df[,1]=as.character(df[,1])
df[,2]=as.character(df[,2])
df[,2]=gsub("Undetermined","NA", df[,2])
x=df[,2]
z <- gsub("\\s+", "", x)
x[z==""] <- NA
df[,2]=x
selected.patient=c()
selected.expression=c()
#check if there are more than one NAs. selected.patients has patients ID that have at least 2 normal samples.
for (i in seq(1, length(df[,2]), 3)){
patient=c(df[i,1],df[i+1,1],df[i+2,1])
expression=c(df[i,2],df[i+1,2],df[i+2,2])
expression=as.numeric(expression)
print(patient)
print(expression)
s=sum(is.na(expression))
print(s)
if (sum(is.na(expression)) < 2 ){
selected.patient=c(selected.patient, patient)
print("selected.patient")
print(selected.patient)
#selected.expression=c(selected.expression, expression)
}
}
#filter out the patients that have 2 out of 3 NAs in the samples.
df=df[df[,1]%in%selected.patient,]
#check if there are rows in the df
if(nrow(df)>0){
print("nrows > 0")
print(selected.patient)
#print(head(df))
dft=t(df)
dfr=as.data.frame(dft)
dfr=t(dfr[c(F,F,T)])
rows=as.character(dfr[,1])
#filter out patients based on the high varience between the samples of one patient.
#filter the data based on mean +2 std
if(nrow(dfr)>1){
filt=median(as.numeric(dfr[,6]),na.rm=T)+2*sd(as.numeric(dfr[,6]),na.rm=T)#filter based on the reference gene cycles
dfr.f=dfr[dfr[,6]<filt,]#keep samples with reference genes number of cycles< meadian+2std
} else{
if(nrow(dfr)==1){
dfr.f=dfr
dfr.f=(as.data.frame(dfr.f))
dfr.f[,15]=as.character(dfr.f[,15])
}
}
dfr.f=dfr.f[dfr.f[,15]< 0.2,]# keep samples with SEM<20%
print("dfr.f")
print(dfr.f)
geneExpr=as.data.frame(dfr.f[,c(1,14)])
} else{
if(nrow(df)==0){
geneExpr=as.data.frame(df[,c(1,14)])
}
}
colnames(geneExpr)[2]=gene
print("new geneEXP")
print(geneExpr)
DataPsoriasisSkin=merge(DataPsoriasisSkin,geneExpr, by.x="SAMPLE", by.y="SAMPLE", all.x=T )
##print(DataControllsSkin)
}
write.table(file="~/Documents/KAI/cytoskin/data.psoriasis_newfilt.txt",DataPsoriasisSkin, sep="\t", quote=F )
###Vitiliigo#
data.cols=read.csv(file=vitiliigo[1])
data.cols=data.cols[7:nrow(data.cols),]
rowsP=as.character(data.cols[,2])
rowsP=rowsP[c(F,F,T)]
DataVitiliigoSkin=rowsP
DataVitiliigoSkin=as.data.frame(DataVitiliigoSkin)
colnames(DataVitiliigoSkin)=c("SAMPLE")
library(functional)
#for each in vitiliigo
for(i in 1:length(vitiliigo)){
#for(i in 1:3){
f=vitiliigo[i]
#print(f)
#f=vitiliigo[1]
gene=gsub("/Users/nikolaeva/Documents/KAI/cytoskin/CT_skin/Ctkalkulaatornahk_","",f)
gene=gsub("_3.csv","",gene)
CTdata=read.csv(file=f)
CTdata=CTdata[7:nrow(CTdata),2:ncol(CTdata)]
df=CTdata
df[,1]=as.character(df[,1])
df[,2]=as.character(df[,2])
df[,2]=gsub("Undetermined","NA", df[,2])
x=df[,2]
z <- gsub("\\s+", "", x)
x[z==""] <- NA
df[,2]=x
selected.patient=c()
selected.expression=c()
#check if there are more than one NAs. selected.patients has patients ID that have at least 2 normal samples.
for (i in seq(1, length(df[,2]), 3)){
patient=c(df[i,1],df[i+1,1],df[i+2,1])
expression=c(df[i,2],df[i+1,2],df[i+2,2])
expression=as.numeric(expression)
print(patient)
print(expression)
s=sum(is.na(expression))
print(s)
if (sum(is.na(expression)) < 2 ){
selected.patient=c(selected.patient, patient)
print("selected.patient")
print(selected.patient)
#selected.expression=c(selected.expression, expression)
}
}
#filter out the patients that have 2 out of 3 NAs in the samples.
df=df[df[,1]%in%selected.patient,]
#check if there are rows in the df
if(nrow(df)>0){
print("nrows > 0")
print(selected.patient)
#print(head(df))
dft=t(df)
dfr=as.data.frame(dft)
dfr=t(dfr[c(F,F,T)])
rows=as.character(dfr[,1])
#filter out patients based on the high varience between the samples of one patient.
#filter the data based on mean +2 std
if(nrow(dfr)>1){
filt=median(as.numeric(dfr[,6]),na.rm=T)+2*sd(as.numeric(dfr[,6]),na.rm=T)#filter based on the reference gene cycles
dfr.f=dfr[dfr[,6]<filt,]#keep samples with reference genes number of cycles< meadian+2std
} else{
if(nrow(dfr)==1){
dfr.f=dfr
dfr.f=(as.data.frame(dfr.f))
dfr.f[,15]=as.character(dfr.f[,15])
}
}
dfr.f=dfr.f[dfr.f[,15]< 0.2,]# keep samples with SEM<20%
print("dfr.f")
print(dfr.f)
geneExpr=as.data.frame(dfr.f[,c(1,14)])
} else{
if(nrow(df)==0){
geneExpr=as.data.frame(df[,c(1,14)])
}
}
colnames(geneExpr)[2]=gene
print("new geneEXP")
print(geneExpr)
DataVitiliigoSkin=merge(DataVitiliigoSkin,geneExpr, by.x="SAMPLE", by.y="SAMPLE", all.x=T )
# print(DataVitiliigoSkin)
}
write.table(file="~/Documents/KAI/cytoskin/data.vitiliigo_newfilt.txt",DataVitiliigoSkin, sep="\t", quote=F )
###PCA plot of the data
ctrls=DataControllsSkin
rows=as.character(ctrls[,1])
cols=colnames(ctrls)[2:43]
ctrls <- apply(ctrls[,2:43],2,as.numeric)
rownames(ctrls)=rows
ctrls=t(ctrls)
#PSO
pso=t(DataPsoriasisSkin)#haige psoriasis
rows=rownames(pso[2:43,])
cols=as.character(pso[1,])
ps <- apply(pso[2:43,],2,as.numeric)
colnames(ps)=cols
rownames(ps)=rows
#VIT.
vit=t(DataVitiliigoSkin)#haige vitiliigo
rows=rownames(vit[2:43,])
cols=as.character(vit[1,])
vi <- apply(vit[2:43,],2,as.numeric)
colnames(vi)=cols
rownames(vi)=rows
library(pheatmap)
data.all=cbind(ctrls, ps,vi)
summary(data.all)
scale_rows = function(x){
m = apply(x, 1, mean, na.rm = T)
s = apply(x, 1, sd, na.rm = T)
return((x - m) / s)
}
#data.pca=scale_rows(data.pca)
data.pca=scale(data.all)
pheatmap(data.pca, cluster_rows = F, cluster_cols = F,scale = "row", main="All data scaled, contains NA")
write.table(data.pca,file="data_all_scaled_with_NA.txt",sep="\t",row.names=F,quote=FALSE)
data.pca1=data.pca[,! apply( data.pca , 2 , function(x) all(is.na(x)) ) ]#removes columns with complete NAs
pheatmap(data.pca1, cluster_rows = F, cluster_cols = F,scale = "row", main="data")#data.pca=data.pca[!rowSums(!is.finite(data.pca)),]#remove nas
numNAs <- apply(data.pca1, 1, function(z) sum(is.na(z)))
# remove rows with more than 50 NAs
data.pca.new=data.pca1[!(numNAs > 50),]
pheatmap(data.pca.new, cluster_rows = F, cluster_cols = F, scale = "row", main="data")
#remove cols with more than 28 NAs
data.pca=t(data.pca.new)
numNAs <- apply(data.pca, 1, function(z) sum(is.na(z)))
data.pca.new=data.pca[!(numNAs >28 ),]#previously it was 9
data.pca=t(data.pca.new)
##scale rows if needed.Currently scale() is used to convert matrix to Z-scores
#data.pca=scale_rows(data.pca)
#summary(data.pca)
#pheatmap(data.pca, cluster_rows = F, cluster_cols = F, main="Filtered and scaled data")
#Impute the missing data using k nearest neighbours all data together
library(impute)
library(RColorBrewer)
data=data.pca
data.pca.imp=impute.knn(data ,k = 4, rowmax = 0.5, colmax = 0.8, maxp = 1500, rng.seed=362436069)
data.pca.imp=as.data.frame(data.pca.imp$data)
pheatmap(data.pca.imp, cluster_rows = T, cluster_cols = F,sclustering_distance_rows = "correlation",clustering_distance_cols = "correlation",clustering_method = "complete",color = colorRampPalette(rev(brewer.pal(n = 7, name = "RdYlBu")))(250), scale="row", main="All data after imputation. KNN, k=4")
###Impute each data part separately ctrls, vt, ps
#library(impute)
###impute missing Was performing worse(PCA and pvclust) in finding patterms in the data
#data=data.pca
#data.ctrls=data[,1:24]
#data.ph=data[,25:57]
#data.pt=data[,58:89]
#data.vh=data[,90:105]
#data.vt=data[,106:120]
#ctrls.imp=impute.knn(data.ctrls ,k = 4, rowmax = 0.5, colmax = 0.8, maxp = 1500, rng.seed=362436069)
#ctrls.imp=as.data.frame(ctrls.imp$data)
#summary(ctrls.imp)
#ph.imp=impute.knn(data.ph ,k = 4, rowmax = 0.5, colmax = 0.8, maxp = 1500, rng.seed=362436069)
#ph.imp=as.data.frame(ph.imp$data)
#pt.imp=impute.knn(data.pt ,k = 4, rowmax = 0.6, colmax = 0.8, maxp = 1500, rng.seed=362436069)
#pt.imp=as.data.frame(pt.imp$data)
#vh.imp=impute.knn(data.vh ,k = 4, rowmax = 0.5, colmax = 0.8, maxp = 1500, rng.seed=362436069)
#vh.imp=as.data.frame(vh.imp$data)
#vt.imp=impute.knn(data.vt ,k = 4, rowmax = 0.5, colmax = 0.8, maxp = 1500, rng.seed=362436069)
#vt.imp=as.data.frame(vt.imp$data)
##Combine the imputed parts together
#data.pca.imp=cbind(ctrls.imp,ph.imp,pt.imp,vh.imp,vt.imp)
#pheatmap(data.pca.imp, cluster_rows = T, cluster_cols = F,sclustering_distance_rows = "correlation",clustering_distance_cols = "correlation",clustering_method = "complete",color = colorRampPalette(rev(brewer.pal(n = 7, name = "RdYlBu")))(250), scale="row", main="All data after imputation. KNN, k=4")
##Quantile normalization(erases most of the variation in the data,PCA makes no sense)
#library(preprocessCore)
#data.pca.imp.m=data.matrix(data.pca.imp)
#data.qnorm=normalize.quantiles(data.pca.imp.m)
#data.pca.imp=data.qnorm
#k-means on imputed data
####http://www.statmethods.net/advstats/cluster.html
#K-means clustering is the most popular partitioning method.
#It requires the analyst to specify the number of clusters to extract.
#A plot of the within groups sum of squares by number of clusters extracted
#can help determine the appropriate number of clusters.
mydata= data.pca.imp
wss <- (nrow(mydata)-1)*sum(apply(mydata,2,var))
for (i in 2:15) wss[i] <- sum(kmeans(mydata,
centers=i)$withinss)
plot(1:15, wss, type="b", xlab="Number of Clusters",
ylab="Within groups sum of squares")
mat1 <- matrix(seq1, 2)
mat1
[,1] [,2] [,3]
[1,]    1    3    5
[2,]    2    4    6\
mat1 <- matrix(seq1, 2)
seq1 <- seq(1:6)
mat1 <- matrix(seq1, 2)
mat1
[,1] [,2] [,3]
[1,]    1    3    5
[2,]    2    4    6
mat1
mat1[,4]=mat1[,1]+mat1[,2]
df=as.data.frame(mat1)
str(df)
df$sum=df$V1+df$V2
df
#Metaanalysis psoriasis
setwd("~/Documents/KAI/cytoskin/nondetects/SKIN_ND/anova")
#load log2transformed data
library(stringr)
library(reshape)
library(ggplot2)
library(pheatmap)
library("limma")
library(plyr)
#load the gene expression  data
p=read.table(file="~/Documents/KAI/cytoskin/psoriasis_all.txt", sep="\t", header=T)
p.meta=p[,1:37]
head(p.meta)
colnames(p.meta)=as.character(unname(unlist(p.meta[1,])))
p.meta=p.meta[2:37,]
rownames(p.meta)=as.character(unname(unlist(p.meta[,1])))
p.meta=t(p.meta[,2:37])
annotation=t(p.meta)
annotationh=annotation
annotationt=annotation
rownames(annotationh)=str_replace(rownames(annotation),"P","PL")
rownames(annotationt)=str_replace(rownames(annotation),"P","PNL")
annotationh=annotationh[1:35,]
annotationt=annotationt[1:35,]
##create correct annotation
################################################ Disease onset ##################
###peredelano iz vitiliigo, Ne nashla original
p=read.table(file="~/Documents/KAI/cytoskin/psoriasis_all.txt", sep="\t", header=T)
p.meta=p[,1:37]
head(p.meta)
colnames(p.meta)=as.character(unname(unlist(p.meta[1,])))
p.meta=p.meta[2:37,]
rownames(p.meta)=as.character(unname(unlist(p.meta[,1])))
p.meta=t(p.meta[,2:37])
annotation=t(p.meta)
annotationh=annotation
annotationt=annotation
rownames(annotationh)=str_replace(rownames(annotation),"P","PL")
rownames(annotationt)=str_replace(rownames(annotation),"P","PNL")
annotationh=annotationh[1:35,]
annotationt=annotationt[1:35,]
################################################ Disease Onset ############################
annotation.h=data.frame(annotationh,stringsAsFactors=FALSE)
annotation.h[annotation.h$Age_of_disease_onset>=40, 9]<-"late"
annotation.h[annotation.h$Age_of_disease_onset< 40,9]<-"early"
annotation.h=annotation.h[order(annotation.h$Age_of_disease_onset),]
#Psoriasis_in_family
annotation.h[,27]=str_replace(annotation.h[,27],"2_.*","familial")
annotation.h[,27]=str_replace(annotation.h[,27],"au.*","familial")
annotation.h[,27]=str_replace(annotation.h[,27],"si.*","familial")
annotation.h[,27]=str_replace(annotation.h[,27],"fa.*","familial")
annotation.h[,27]=str_replace(annotation.h[,27],"mo.*","familial")
annotation.h[,27]=str_replace(annotation.h[,27],"so.*","familial")
annotation.h[,27]=str_replace(annotation.h[,27],"bro.*","familial")
annotation.h[,27]=str_replace(annotation.h[,27],"chi.*","familial")
annotation.h[,27]=str_replace(annotation.h[,27],"no","sporadic")
annotation.h=annotation.h[order(annotation.h[,27]),]
######################################### Psoriatic artritis##############################
########################################### Nail_involvment ##################
###################### PASI ########################################################################
annotation.h[,7]=str_replace(annotation.h[,7],",",".")
annotation.h=data.frame(annotation.h)
annotation.h[,7]=as.numeric(as.vector(annotation.h[,7]))
annotation.h[,7]=cut(annotation.h[,7], c(0, 10, 20, Inf))
#################################### Skin phototype ###########################################
###############################Duration of the  psoriasis ##################
annotation.h[,10]=str_replace(annotation.h[,10],",",".")
annotation.h=data.frame(annotation.h)
annotation.h[,10]=as.numeric(as.vector(annotation.h[,10]))
annotation.h[,10]=cut(annotation.h[,10], c(0, 5, 15, Inf))
################################# merge with expression ########################
data=as.data.frame(data.skin)
p=data[,24:87]
dt=t(data)
dt=cbind(sample=row.names(dt),dt)
dt=dt[24:87,]
annotation.h=annotation.h[rownames(annotation.h)%in%colnames(p)[1:64],]
annotation.t=annotation.h
rownames(annotation.t)=str_replace(rownames(annotation.t),"PL","PNL")
annotation.pso.h.t=rbind(annotation.h, annotation.t)
Sample=rownames(annotation.pso.h.t)
Sample=str_replace(Sample,"PL0.*","PL")
Sample=str_replace(Sample,"PNL0.*","PNL")
annotation.pso.h.t=cbind(Sample,annotation.pso.h.t)
annotation.pso.h.t=as.data.frame(annotation.pso.h.t,stringsAsFactors=FALSE)
#annotation.pso.h.t=cbind(annotation.pso.h.t, interaction(annotation.pso.h.t$Sample, annotation.pso.h.t$Age_of_disease_onset, annotation.pso.h.t$Nail_involvment))
#colnames(annotation.pso.h.t)[4]="interactions"
ann=cbind(annotation.pso.h.t, rownames(annotation.pso.h.t))
colnames(ann)[38]="sample"
#Merge annotation with the data andsubset differentially expressed genes
dt.merged=merge(ann,dt,by="sample",all=T)
dt.merged[, 39:80] <- sapply(dt.merged[, 39:80], as.character)
dt.merged[, 39:80] <- sapply(dt.merged[, 39:80], as.numeric)
dt.merged.melt=melt(dt.merged)
colnames(dt.merged.melt)[40]="expression"
tmp <- subset(dt.merged.melt,variable%in%selected_genes)
load(file="~/Documents/KAI/cytoskin/nondetects/SKIN_ND/data_skin_cp_nd.RData")
data.skin=data_skin_cp_nd
load(file="~/Documents/KAI/cytoskin/nondetects/SKIN_ND/data_skin_cp_nd.RData")
data.skin=data_skin_cp_nd
p=read.table(file="~/Documents/KAI/cytoskin/psoriasis_all.txt", sep="\t", header=T)
p.meta=p[,1:37]
head(p.meta)
colnames(p.meta)=as.character(unname(unlist(p.meta[1,])))
p.meta=p.meta[2:37,]
rownames(p.meta)=as.character(unname(unlist(p.meta[,1])))
p.meta=t(p.meta[,2:37])
annotation=t(p.meta)
annotationh=annotation
annotationt=annotation
rownames(annotationh)=str_replace(rownames(annotation),"P","PL")
rownames(annotationt)=str_replace(rownames(annotation),"P","PNL")
annotationh=annotationh[1:35,]
annotationt=annotationt[1:35,]
p=read.table(file="~/Documents/KAI/cytoskin/psoriasis_all.txt", sep="\t", header=T)
p.meta=p[,1:37]
head(p.meta)
colnames(p.meta)=as.character(unname(unlist(p.meta[1,])))
p.meta=p.meta[2:37,]
rownames(p.meta)=as.character(unname(unlist(p.meta[,1])))
p.meta=t(p.meta[,2:37])
annotation=t(p.meta)
annotationh=annotation
annotationt=annotation
rownames(annotationh)=str_replace(rownames(annotation),"P","PL")
rownames(annotationt)=str_replace(rownames(annotation),"P","PNL")
annotationh=annotationh[1:35,]
annotationt=annotationt[1:35,]
annotation.h=data.frame(annotationh,stringsAsFactors=FALSE)
annotation.h[annotation.h$Age_of_disease_onset>=40, 9]<-"late"
annotation.h[annotation.h$Age_of_disease_onset< 40,9]<-"early"
annotation.h=annotation.h[order(annotation.h$Age_of_disease_onset),]
#Psoriasis_in_family
annotation.h[,27]=str_replace(annotation.h[,27],"2_.*","familial")
annotation.h[,27]=str_replace(annotation.h[,27],"au.*","familial")
annotation.h[,27]=str_replace(annotation.h[,27],"si.*","familial")
annotation.h[,27]=str_replace(annotation.h[,27],"fa.*","familial")
annotation.h[,27]=str_replace(annotation.h[,27],"mo.*","familial")
annotation.h[,27]=str_replace(annotation.h[,27],"so.*","familial")
annotation.h[,27]=str_replace(annotation.h[,27],"bro.*","familial")
annotation.h[,27]=str_replace(annotation.h[,27],"chi.*","familial")
annotation.h[,27]=str_replace(annotation.h[,27],"no","sporadic")
annotation.h=annotation.h[order(annotation.h[,27]),]
######################################### Psoriatic artritis##############################
########################################### Nail_involvment ##################
###################### PASI ########################################################################
annotation.h[,7]=str_replace(annotation.h[,7],",",".")
annotation.h=data.frame(annotation.h)
annotation.h[,7]=as.numeric(as.vector(annotation.h[,7]))
annotation.h[,7]=cut(annotation.h[,7], c(0, 10, 20, Inf))
#################################### Skin phototype ###########################################
###############################Duration of the  psoriasis ##################
annotation.h[,10]=str_replace(annotation.h[,10],",",".")
annotation.h=data.frame(annotation.h)
annotation.h[,10]=as.numeric(as.vector(annotation.h[,10]))
annotation.h[,10]=cut(annotation.h[,10], c(0, 5, 15, Inf))
data=as.data.frame(data.skin)
p=data[,24:87]
dt=t(data)
dt=cbind(sample=row.names(dt),dt)
dt=dt[24:87,]
annotation.h=annotation.h[rownames(annotation.h)%in%colnames(p)[1:64],]
annotation.t=annotation.h
rownames(annotation.t)=str_replace(rownames(annotation.t),"PL","PNL")
annotation.pso.h.t=rbind(annotation.h, annotation.t)
Sample=rownames(annotation.pso.h.t)
Sample=str_replace(Sample,"PL0.*","PL")
Sample=str_replace(Sample,"PNL0.*","PNL")
annotation.pso.h.t=cbind(Sample,annotation.pso.h.t)
annotation.pso.h.t=as.data.frame(annotation.pso.h.t,stringsAsFactors=FALSE)
#
ann=cbind(annotation.pso.h.t, rownames(annotation.pso.h.t))
colnames(ann)[38]="sample"
dt.merged=merge(ann,dt,by="sample",all=T)
dt.merged[, 39:80] <- sapply(dt.merged[, 39:80], as.character)
dt.merged[, 39:80] <- sapply(dt.merged[, 39:80], as.numeric)
dt.merged.melt=melt(dt.merged)
colnames(dt.merged.melt)[40]="expression"
tmp <- subset(dt.merged.melt,variable%in%selected_genes)
load(file="selected.genes.RData")
load("~/Documents/KAI/cytoskin/nondetects/SKIN_ND/anova/selected_genes_skin_nd.RData")
dim(selected_genes_skin_nd)
dim(selected_genes)
length(selected_genes)
load("~/selected.genes.RData")
selected.genes
tmp <- subset(dt.merged.melt,variable%in%selected.genes)
myLm <- function(formula, df){
lmList <- lm(formula, data=df)
lmOut <- data.frame(t(lmList$coefficients))
#names(lmOut) <- c("intercept","Age_of_disease_onset_coef","Sample_coef",
#                     "PASI_.activity_score._coef","Duration_of_disease.years._coef","Skin_phototype_coef",
#                  "Psoriatic_arthritis_coef","Psoriasis_in_family_coef","Nail_involvment_coef")
# return(lmOut)
}
outDf <- ddply(tmp, "variable", function(tmp)  myLm (expression ~ Age_of_disease_onset + Sample +
PASI_.activity_score.+ Duration_of_disease.years. +
Skin_phototype + Psoriatic_arthritis +
Psoriasis_in_family +Nail_involvment, tmp))
View(tmp)
lmList <- lm(formula, data=df)
lmOut <- data.frame(t(lmList$coefficients))
names(lmOut) <- c("intercept","Age_of_disease_onset_coef","Sample_coef",
#                    "PASI_.activity_score._coef","Duration_of_disease.years._coef","Skin_phototype_coef",
"Psoriatic_arthritis_coef","Psoriasis_in_family_coef","Nail_involvment_coef")
lmList <- lm(expression ~ Age_of_disease_onset + Sample +
PASI_.activity_score.+ Duration_of_disease.years. +
Skin_phototype + Psoriatic_arthritis +
Psoriasis_in_family +Nail_involvment, data=tmp[tmp$variable%in%"AIM2",])
summary(LmList)
lm(expression ~ Age_of_disease_onset + Sample +
PASI_.activity_score.+ Duration_of_disease.years. +
Skin_phototype + Psoriatic_arthritis +
Psoriasis_in_family +Nail_involvment, data=tmp[tmp$variable%in%"AIM2",])
